remove.packages("epihap")
epiHap_epi <- function(input, replicates = 100, threshold = 0.02, single = TRUE, listnames, output) {
#DEPENDENCIES:
library(stringr)
library(gdata)
#1. FILTERING HAPLOTYPES AND SAMPLING WITH REPLACEMENT. CREATE EPI FILES
####################################################################################
#Set the output directory
setwd(output)
#Create an output directory to save filtered haplotypes
dir.create("Epi", showWarnings = FALSE)
#Set input directory.
setwd(input)
#Names of the raw (no filtered) files
temp_raw <- list.files()
#Filtering haplotypes with < 2% frequency and recalculate frequencies (adding sampling with replacement)
for (i in seq_along(temp_raw)) {
epiHap_filter(input = input, file = temp_raw[i], replicates = replicates, threshold = threshold, output = paste0(output, "Epi"))
setwd(input)
}
#2. CREATE EPIFASTA FILE
####################################################################################
#Set input directory.
setwd(input)
#Names of the raw (no filtered) files
temp_raw <- list.files()
epifasta_list <- list()
for (i in seq_along(temp_raw)) {
#Load the sample
sample <- read.table(temp_raw[i], header = FALSE, sep = " ", row.names = NULL, col.names = "Epihaplotype", colClasses = "character")
#sort sample_replicate by read
sample <- arrange(sample, Epihaplotype)
#Create a dataframe with unique epihaplotypes and each frequency
sample <- as.data.frame(table(sample), stringsAsFactors = FALSE)
colnames(sample) <- c("Epihaplotype", "Read_count")
sample$Frequency <- sapply(sample$Read_count, function(x) x / sum(sample$Read_count))
sample <- data.frame(Epihaplotype = sample$Epihaplotype, Frequency = sample$Frequency, stringsAsFactors = FALSE)
#Filter by given value
sample <- subset(sample, sample$Frequency >= threshold)
sample$Frequency <- sample$Frequency / sum(sample$Frequency)
#Save the replicate into the list
epifasta_list[[i]] <- sample
}
names(epifasta_list) <- temp_raw
#Set output directory
setwd(paste0(output, "Epi"))
#Save each file of the list
for (i in seq_along(epifasta_list)){
write.table(epifasta_list[[i]], file = paste0(epifasta_list[i], ".epifasta"), quote=FALSE, row.names = FALSE, col.names = colnames(epifasta_list[[i]]))
}
}
epiHap_epi(input = "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/cancerpop17_colon_bulk/normal/raw_prepared/",
ñsaldkjf
,,,
""
print("hola")
remove.packages("epihap")
n = 1000
datos = rnorm(n)
suma = sum(datos)
suma2 = sum(datos**2)
hist(datos)
hist(datos**2)
Jose = function(n = 1000, ...) {
datos = rnorm(n)
suma = sum(datos)
suma2 = sum(datos**2)
par(mfcol = c (1,2))
hist(datos, ...)
hist(datos**2, ...)
#Creamos unha lista para que logo imprima en pantalla datos, suma e suma2
list(A = datos, B = suma, C = suma2)
}
a = JOSE()
a = Jose()
a
set.seed(1)
Diana=function(n=3000,r=1)  {
x=runif(2*n,min=-r,max=r)
y=runif(2*n,min=-r,max=r)
ii=sqrt(x**2+y**2)<=r
x=x[ii]; y=y[ii]
data.frame(x=x[1:n],y=y[1:n])
}
datos = Diana(n=500, r=1)
View(datos)
library(mgcv)
help(mgcv-"mgcv-package")
help("mgcv-package")
a <- c(3907, 501, 171.3, 13.61, 0.79, 2.1, 2.5, 0.0675, 0.2287, 0.2178, 2635, 336, 172.4, 19.49, 0.6409, 1.873, 2.076, 0.0789, 0.193, 0.2869, 3590, 369.1, 166.3, 17.24, 0.6749, 1.609, 2.501, 0.0709, 0.1628, 0.2347, 2818, 334.3, 128, 17.33, 0.7011, 1.414, 1.866, 0.0623, 0.2249, 0.2034, 2907, 334.5, 165.3, 20.88, 0.7001, 1.358, 2.64, 0.0665, 0.2421, 0.2086)
b <- a*2
b
c <- a*5
c
current.folder <- "/Users/jlsovaz/Desktop/trees_faltan/"
new.folder <- "/Users/jlsovaz/Desktop/parameters_faltan/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
current.folder <- "/Users/jlsovaz/Desktop/trees_faltan/"
new.folder <- "/Users/jlsovaz/Desktop/parameters_faltan/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
current.folder <- "/Users/jlsovaz/Desktop/trees_faltan/"
new.folder <- "/Users/jlsovaz/Desktop/parameters_faltan/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
current.folder <- "/Users/jlsovaz/Desktop/trees_faltan/"
new.folder <- "/Users/jlsovaz/Desktop/parameters_faltan/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
for (i in seq_along(list_files_current)){
ñalksdj
dddñññ
sñlfkñl2
..,.,
current.folder <- "/Users/jlsovaz/Desktop/trees_faltan/"
new.folder <- "/Users/jlsovaz/Desktop/parameters_faltan/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
for (i in seq_along(list_files_current)){
file.copy(paste0(current.folder, list_files_current[i], "/", "results/trees_dir/tree"), paste0(new.folder, "/", list_files_new[i]))
}
current.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/x2/3.scenaries_using_trees/"
current.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/same/3.scenaries_using_trees/"
new.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/x2/3.scenaries_using_trees/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
current.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/same/3.scenaries_using_trees/"
new.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/x2/3.scenaries_using_trees/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
for (i in seq_along(list_files_current)){
file.copy(paste0(current.folder, list_files_current[i], "/", "results/trees_dir/tree_x2"), paste0(new.folder, "/", list_files_new[i]))
}
warnings()
current.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/tree_creation/"
new.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/x2/3.scenaries_using_trees/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
for (i in seq_along(list_files_current)){
file.copy(paste0(current.folder, list_files_current[i], "/", "results/trees_dir/tree_x2"), paste0(new.folder, "/", list_files_new[i]))
}
current.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/tree_creation/"
new.folder <- "/Users/jlsovaz/Desktop/CLOCK_METHYLATION_DATASETS/simulations/with_trees/x5/3.scenaries_using_trees/"
list_files_current <- list.files(current.folder)
list_files_new <- list.files(new.folder)
for (i in seq_along(list_files_current)){
file.copy(paste0(current.folder, list_files_current[i], "/", "results/trees_dir/tree_x5"), paste0(new.folder, "/", list_files_new[i]))
}
.Library
ls
load("~/Desktop/curso_data_mining/TEORIA/UNIDAD 0/deudas.RData")
View(deudas)
summary(deudas)
rcorr.adjust(Dataset[,c("Deud_ing","Deud_otr","Deud_tarj","Ingreso")], type="pearson", use="complete")
library(Rcmdr)
rcorr.adjust(Dataset[,c("Deud_ing","Deud_otr","Deud_tarj","Ingreso")], type="pearson", use="complete")
rcorr.adjust(deudas[,c("Deud_ing","Deud_otr","Deud_tarj","Ingreso")], type="pearson", use="complete")
a <- list.files("/Users/jlsovaz/Desktop/RESULTS_HAPLOTREE/no_filtering/6.simulations/without_trees/Fasta/")
a[4169]
a[4200]
a[4217]
a[4218]
a[4221]
a[4230]
a[4250]
a[4300]
a[4500]
En primer lugar, seleccionamos nuestro directorio de trabajo. En mi caso:
setwd("/Users/jlsovaz/Desktop/curso_data_mining/TEORIA/UNIDAD 1/")
Para poder aplicar CHAID, necesario instalar y cargar el paquete "CHAID":
library(e1071)
Establecemos una semilla para lograr reproducibilidad en los resultados obtenidos:
set.seed(12345)
Importamos el dataset del primer problema en formato .RData con la función load:
load("algas.RData")
A partir de este dataset, creamos nuestras dos muestras: la de entrenamiento y la de validación:
muestra <- sample(1:nrow(algas), 20)
entrenamiento <- algas[muestra,]
prueba <- algas[-muestra,]
#En primer lugar, seleccionamos nuestro directorio de trabajo. En mi caso:
setwd("/Users/jlsovaz/Desktop/curso_data_mining/TEORIA/UNIDAD 1/")
#En primer lugar, seleccionamos nuestro directorio de trabajo. En mi caso:
setwd("/Users/jlsovaz/Desktop/curso_data_mining/TEORIA/UNIDAD 0/")
#En primer lugar, seleccionamos nuestro directorio de trabajo. En mi caso:
setwd("/Users/jlsovaz/Desktop/curso_data_mining/TEORIA/UNIDAD 1/")
#En primer lugar, seleccionamos nuestro directorio de trabajo. En mi caso:
setwd("/Users/jlsovaz/Desktop/curso_data_mining/TEORIA/UNIDAD 1/")
#Importamos el dataset del primer problema en formato .RData con la función load:
load("vinos.RData")
#Construimos la muestra que servirá de entrenamiento con 40 casos y la de validación con los restantes:
muestra <- sample(1:nrow(vinos), 40)
entrenamiento <- vinos[muestra, ]
prueba <- vinos[-muestra, ]
#Cargamos el paquete necesario para aplicar el método CART:
library(rpart)
#Aplicamos el método CART
modelo <- rpart(var ~ . , data = entrenamiento)
#Utilizamos el modelo creado para predecir a qué clase pertenecen los vinos del subset de validación en función de la concentración de los ácidos orgánicos:
resultados <- predict(object = modelo, newdata = prueba, type = "class")
t <- table(resultados, prueba$var)
t ; 100 * sum(diag(t)) / sum(t)
#Como funciona muy bien la predicción, podemos repetir el modelo utilizando esta vez como muestra el dataset entero:
modelo <- rpart(var ~ . , data = vinos)
#Utilizamos el modelo creado para predecir a qué clase pertenecen los vinos del subset de validación en función de la concentración de los ácidos orgánicos:
resultados <- predict(object = modelo, newdata = prueba, type = "class")
t <- table(resultados, vinos$var)
t ; 100 * sum(diag(t)) / sum(t)
#Utilizamos el modelo creado para predecir a qué clase pertenecen los vinos del subset de validación en función de la concentración de los ácidos orgánicos:
resultados <- predict(object = modelo, newdata = vinos, type = "class")
t <- table(resultados, vinos$var)
t ; 100 * sum(diag(t)) / sum(t)
library(rpart_plot)
#Cargamos el paquete necesario para aplicar el método CART:
library(rpart)
install.packages("rpart_plot")
install.packages("rpart_plot", repos = 'http://cran.rstudio.com/')
install.packages("rpart_plot", repos = 'http://R-Forge.R-project.org/')
install.packages("rpart_plot", repos = http://R-Forge.R-project.org/")
install.packages("rpart_plot", repos = "http://R-Forge.R-project.org/")
modelo
#En primer lugar, seleccionamos nuestro directorio de trabajo. En mi caso:
setwd("/Users/jlsovaz/Desktop/curso_data_mining/TEORIA/UNIDAD 0/")
#Importamos el dataset del primer problema en formato .RData con la función load:
load("deudas.RData")
#Establecemos una semilla para lograr reproducibilidad en los resultados obtenidos:
set.seed(123)
#Construimos la muestra que servirá de entrenamiento con 40 casos y la de validación con los restantes:
muestra <- sample(1:nrow(vinos), 80)
#Construimos la muestra que servirá de entrenamiento con 40 casos y la de validación con los restantes:
muestra <- sample(1:nrow(deudas), 80)
entrenamiento <- deudas[muestra, ]
prueba <- deudas[-muestra, ]
#Cargamos el paquete necesario para aplicar el método CART:
library(C50)
install.packages("C50")
#Cargamos el paquete necesario para aplicar el método CART:
library(C50)
#Aplicamos el método C50
modelo <- C5.0(Impago ~ Ingreso+Deud_ing+Deud_tarj+Deud_otr, data = entrenamiento)
#Exploramos el modelo construído:
summary(modelo)
#Construímos la matriz de confusión con el subset de validación:
resultados.entrenamiento <- predict(modelo, newdata = entrenamiento, type = "class")
table(resultados.entrenamiento, entrenamiento$Impago)
modelo <- C5.0(Impago ~ Ingreso+Deud_ing+Deud_tarj+Deud_otr, data = deudas)
resultados.entrenamiento <- predict(modelo, newdata = deudas, type = "class")
table(resultados.entrenamiento, deudas$Impago)
plot(modelo)
